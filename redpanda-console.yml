
kafka:
  brokers:
    - broker:29092
  clientId: console
  schemaRegistry:
    enabled: true
    urls: 
      - http://schema-registry:8081
  protobuf:
    enabled: true
    # SchemaRegistry does not require any mappings to be specified. The schema registry client configured on the kafka level will be reused.
    schemaRegistry:
      enabled: true
      refreshInterval: 1m
  # messagePack:
  #   enabled: true
  #   topicNames: ["/.*/"] # List of topic name regexes, defaults to /.*/
  # Startup is a configuration block to specify how often and with what delays
  # we should try to connect to the Kafka service. If all attempts have failed the
  # application will exit with code 1.
  # startup:
  #   maxRetries: 5
  #   retryInterval: 1s
  #   maxRetryInterval 60s
  #   backoffMultiplier: 2

connect:
  enabled: true
  clusters:
    - name: local-connect-cluster
      url: http://connect:8083

# console:
#   # Config to use for embedded topic documentation, see /docs/features/topic-documentation.md for more details
#   topicDocumentation:
#     enabled: false
#     # Git is where the topic documentation can come from, in the future there might be additional options
#     git:
#       enabled: false
#       repository:
#         url:
#         branch: (defaults to primary/default branch)
#         baseDirectory: .
#       # How often Console shall pull the repository to look for new files. Set 0 to disable periodic pulls
#       refreshInterval: 1m
#       # Basic Auth
#       # If you want to use GitHub's personal access tokens use `token` as username and pass the token as password
#       basicAuth:
#         enabled: true
#         username: token
#         password: #  This can be set via the via the --console.topic-documentation.git.basic-auth.password flag as well
#       # SSH Auth
#       # You can either pass the private key file directly via flag or yaml config or refer to a mounted key file
#       ssh:
#         enabled: false
#         username:
#         privateKey: # This can be set via the via the --console.topic-documentation.git.ssh.private-key flag as well
#         privateKeyFilepath:
#         passphrase: # This can be set via the via the --console.topic-documentation.git.ssh.passphrase flag as well

# server:
#   listenAddress:
#   listenPort: 8080
#   # HTTPSListenPort and HTTPListenPort are separate so that we can listen
#   # on both and redirect users to the HTTPS url.
#   httpsListenPort: 8081
#   # AdvertisedHTTPSListenPort is the HTTPS port that will be used for
#	# redirecting the user in the browser. If your application is serving
#	# the TLS port on 8081 but some LoadBalancer between the user and your
#	# Go application remaps this to 443 you want to set this port to
#	# 443 as well. Otherwise, users will be redirected to your httpsListenPort.
#   advertisedHttpsListenPort:
#   gracefulShutdownTimeout: 30s
#   listenPort: 8080
#   readTimeout: 30s
#   writeTimeout: 30s
#   idleTimeout: 30s
#   compressionLevel: 4
#   basePath: # Sub-path under which Console is hosted. See 'docs/features/hosting.md' for more information
#   setBasePathFromXForwardedPrefix: true # Whether or not to check the 'X-Forwarded-Prefix' header to (potentially) override 'basePath'
#   stripPrefix: true # Whether or not Console should strip the prefix internally
#   # TLS contains the configuration properties for the HTTP
#   # TLS configuration. If enabled, the HTTP server will serve on
#   # HTTPS and terminate TLS. Additional to the TLS server Console
#   # will start an HTTP server that is in charge of redirecting HTTP
#   # requests to the HTTPS version.
#   tls:
#     enabled: false
#     certFilepath:
#     keyFilepath:
#   # AllowedOrigins is a list of origins that can send requests from a browser to the Console
#   # API. By default, a same-site policy is enforced to prevent CSRF-attacks.
#   # Only in very specific deployment models you may need to change the secure default.
#   allowedOrigins: []

# logger:
#   level: info # Valid values are: debug, info, warn, error, fatal

# Only relevant for developers, who might want to run the frontend separately
# serveFrontend: true

# Prefix for all exported prometheus metrics
# metricsNamespace: console

